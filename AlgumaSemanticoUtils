package  br.ufscar.dc.compiladores.alguma.gerador ;

import  java.util.ArrayList ;
import  java.util.List ;
import  org.antlr.v4.runtime.Token ;

public  class  AlgumaSemanticoUtils {
     public  static  List < String > errosSemanticos =  new  ArrayList <> ();
    
    public  static  void  adicionarErroSemantico ( Token  t , String  mensagem ) {
         int linha = t . Obter linha();
        int coluna = t . getCharPositionInLine ();
        errosSemanticos . add ( String . format ( " Erro% d:% d -% s " , linha, coluna, mensagem));
    }
    
     TabelaDeSimbolos estática  pública . TipoAlguma verificarTipo ( TabelaDeSimbolos tabela , AlgumaParser . ExpressaoAritmeticaContext ctx ) {
         TabelaDeSimbolos . TipoAlguma ret = nulo ;
        for ( var ta : ctx . termoAritmetico ()) {
             TabelaDeSimbolos . TipoAlguma aux = verificarTipo (tabela, ta);
            if (ret == null ) {     
                ret = aux;
            } else  if (ret ! = aux && aux ! =  TabelaDeSimbolos . TipoAlguma . INVALIDO ) {
                adicionarErroSemantico (ctx . start, " Expressão "  + ctx . getText () +  " tipos incompatíveis " );
                ret =  TabelaDeSimbolos . TipoAlguma . INVALIDO ;
            }
        }

        return ret;
    }

     TabelaDeSimbolos estática  pública . TipoAlguma verificarTipo ( TabelaDeSimbolos tabela , AlgumaParser . TermoAritmeticoContext ctx ) {
         TabelaDeSimbolos . TipoAlguma ret = nulo ;    

        for ( var fa : ctx . fatorAritmetico ()) {
             TabelaDeSimbolos . TipoAlguma aux = verificarTipo (tabela, fa);
            if (ret ==  null ) {
                ret = aux;
            } else  if (ret ! = aux && aux ! =  TabelaDeSimbolos . TipoAlguma . INVALIDO ) {
                adicionarErroSemantico (ctx . start, " Termo "  + ctx . getText () +  " contém tipos incompatíveis " );
                ret =  TabelaDeSimbolos . TipoAlguma . INVALIDO ;
            }
        }
        return ret;
    }

     TabelaDeSimbolos estática  pública . TipoAlguma verificarTipo ( TabelaDeSimbolos Tabela , AlgumaParser . FatorAritmeticoContext ctx ) {
         se ( ctx . NUMINT () ! = NULL ) {
             return TabelaDeSimbolos . TipoAlguma . INTEIRO ;     
        }
        if ( ctx . NUMREAL () ! =  null ) {
             return  TabelaDeSimbolos . TipoAlguma . REAL ;
        }
        if ( ctx . VARIAVEL () ! =  null ) {
             String nomeVar =  ctx . VARIAVEL () . getText ();
            if ( ! tabela . existe (nomeVar)) {
                adicionarErroSemantico ( ctx . VARIAVEL () . getSymbol (), " Variável "  + nomeVar +  " não foi declarada antes do uso " );
                retornar  TabelaDeSimbolos . TipoAlguma . INVALIDO ;
            }
            return verificarTipo (tabela, nomeVar);
        }
        // se não para nenhum dos tipos acima, só pode ser uma expressão 
        // entre parêntesis 
        return verificarTipo (tabela, ctx . expressaoAritmetica ());
    }
    
     TabelaDeSimbolos estática  pública . TipoAlguma verificarTipo ( TabelaDeSimbolos tabela , String nomeVar ) {
         retornar tabela . verificar (nomeVar);   
    }
}
