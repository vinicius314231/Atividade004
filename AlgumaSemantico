package  br.ufscar.dc.compiladores.alguma.gerador ;

import  br.ufscar.dc.compiladores.alguma.gerador.TabelaDeSimbolos.TipoAlguma ;

public  class  AlgumaSemantico  estende  AlgumaBaseVisitor < Void > {

    TabelaDeSimbolos tabela;

    @Override 
    public  Void  visitPrograma ( AlgumaParser . ProgramaContext  ctx ) {
        tabela =  novo  TabelaDeSimbolos ();
        retorno  super . visitPrograma (ctx);
    }

    @Override 
    public  Void  visitDeclaracao ( AlgumaParser . DeclaracaoContext  ctx ) {
         String nomeVar =  ctx . VARIAVEL () . getText ();
        String strTipoVar =  ctx . TIPO_VAR () . getText ();
        TipoAlguma tipoVar =  TipoAlguma . INVALIDO ;
        switch (strTipoVar) {
             case  " INTEIRO " :
                tipoVar =  TipoAlguma . INTEIRO ;
                pausa ;
            case  " REAL " : 
                tipoVar =  TipoAlguma . REAL ;
                pausa ;
            padrão : 
                // Nunca irá acontecer, pois o analisador sintático 
                // não permite 
                pausa ;
        }

        // Verificar se a variável já foi declarada 
        se (tabela . Existe (nomeVar)) {
             AlgumaSemanticoUtils . adicionarErroSemantico ( ctx . VARIAVEL () . getSymbol (), " Variável "  + nomeVar +  " existe " );
        } else {
            tabela . adicionar (nomeVar, tipoVar);
        }

        retorno  super . visitDeclaração (ctx);
    }

    @Override 
    public  Void  visitComandoAtribuicao ( AlgumaParser . ComandoAtribuicaoContext  ctx ) {
         TipoAlguma tipoExpressao =  AlgumaSemanticoUtils . verificarTipo (tabela, ctx . expressaoAritmetica ());
        if (tipoExpressao ! =  TipoAlguma . INVALIDO ) {
             String nomeVar =  ctx . VARIAVEL () . getText ();
            if ( ! tabela .existe (nomeVar)) {
                 AlgumaSemanticoUtils . adicionarErroSemantico ( ctx . VARIAVEL () . getSymbol (), " Variável "  + nomeVar +  " não foi declarada antes do uso " );
            } else {
                 TipoAlguma tipoVariavel =  AlgumaSemanticoUtils . verificarTipo (tabela, nomeVar);
                if (tipoVariavel ! = tipoExpressao && tipoExpressao ! =  TipoAlguma . INVALIDO ) {
                     AlgumaSemanticoUtils . adicionarErroSemantico ( ctx . VARIAVEL () . getSymbol (), " Tipo da variável "  + nomeVar +  " não é compatível com o tipo da expressão" );
                }
            }
        }
        retorno  super . visitComandoAtribuicao (ctx);
    }

    @Override 
    public  Void  visitComandoEntrada ( AlgumaParser . ComandoEntradaContext  ctx ) {
         String nomeVar =  ctx . VARIAVEL () . getText ();
        if ( ! tabela . existe (nomeVar)) {
             AlgumaSemanticoUtils . adicionarErroSemantico ( ctx . VARIAVEL () . getSymbol (), " Variável "  + nomeVar +  " não foi declarada antes do uso" );
        }
        retorno  super . visitComandoEntrada (ctx);
    }

    @Override 
    public  Void  visitExpressaoAritmetica ( AlgumaParser . ExpressaoAritmeticaContext  ctx ) {
         AlgumaSemanticoUtils . verificarTipo (tabela, ctx);
        retorno  super . visitExpressaoAritmetica (ctx);
    }
}
